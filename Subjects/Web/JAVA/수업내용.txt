Java

------------------------------------------------- 07월 20일 ------------------------------------------------
변수에 ++를 붙이는 경우 1씩 증가함
단, 아래와 같이 앞 뒤에 붙이는 것에 차이가 있음. 앞에 붙일 경우 y값이 연산이 된 후 x값이 정해지지만, 
y뒤에 붙으면 x 값을 먼저 정해지고 연산이 진행됨. 
x=++y
x=y++

k=10 대입연산자 
k+=10 <-- k=k+10 로 계산한다. 

문자열 변수의 경우 +는 결합하라는 뜻으로 변한다. 

비교 연산자는 값으로 True와 False를 출력한다. 
== 은 비교 연산자 
= 은 값 연산자
>= 또는 <= 에서 =는 항상 오른쪽에 표시한다. 

논리연산자
&& 두 조건이 모두 True여야 True로 처리
|| 두 조건중 하나라도 True면 True로 처리
! true면 false로 false면 true로 바꿔준다. 

조건연산자
수식 ? 참:거짓; 수식의 값에 따라서 참이면 앞에 거짓이면 뒤에 입력한다. 



숫자와 문자형 자료를 서로 변환한다
parseInt() 문자 -> 숫자
String() 숫자 -> 문자 

prompt () 함수
팝업창을 띄워서 문자열로 저장한다.  


------------------------------------------------- 07월 21일 ------------------------------------------------

조건문
if (조건식) {실행문장}<-- 조건이 참일 때 실행문장을 실행하도록 사용하며 일반적으로 조건식에 비교 연산자를 사용
if (조건식) {실행문장} else {실행문장} <-- 조건이 참이 아닐때는 else를 추가하여 거짓에 경우에도 실행되도록 한다. 
	※ {} <-- 실행문장을 1개만 사용하는 경우에는 {}을 생략할 수 있다. 
다중 if문은 else if를 연속적으로 사용할 수 있으며 if와 마찬가지로 조건식에서 참일 경우에만 실행된다. 
else 뒤에는 조건을 추가 할 수 없다. 
실행문장 내에도 if문을 중첩으로 사용할 수 잇다. 이 경우 실행문장을 실행하기 위해 해당 if 문의 조건에 해당되어야 한다. 

Switch 문
단순 비교에 주로 사용

Switch (제어식) {case 'c1': {실행문장; break; case 'c2'....} 제어식과 c1을 단순히 같은지만 비교한다. 있으면 실행하고 없을 경우 최하에 기재하는 default를 출력한다. 생략도 가능하다. 

반복문
While 루프 <-- 조건이 참이면 반복 실행한다. 
for 루프 <-- for(초기식; 조건식; 증감식){실행문장} 형태로 진행

For 또한 if문과 동일하게 실행문에 중첩하여 사용할 수 있다. 

do while루프
do {실행문장} while {조건식} 로 사용 <-- 조건식이 맞지 않아도 최소 1회는 실행함



------------------------------------------------- 07월 22일 ------------------------------------------------


배열
많은 변수를 선언해야 할때 지정한 하나의 변수에 숫자를 붙여서 선언하는 방법
1. 리터럴 방식
2. Array 방식

함수 
function 함수이름() { 함수 몸체 } 함수몸체에는 지정한 이름의 함수를 호출 후 실행되는 코드를 설정한다. 함수이름과 코드는 프로그래머가 직접 작성하며 {}는 생략이 불가능하다.
함수의 실행은 해당 함수이름을 입력하여 호출한다. 

매개변수
선언한 함수이름 뒤 () 안에 변수를 추가 가능하며 호출할 때 변수를 지정하면 해당 변수를 이용하여 코드를 실행하게 된다. 
반환값
함수 내 return 값을 지정할 경우 호출하는 쪽에서 직접사용할 수 있음
대개의 경우 해당 return 값을 다시 변수로 지정하여 추가 작업을 진행하게 된다
alert이나 prompt 같이 java script에서 기본으로 제공하는 것도 있음


전역변수 & 지역변수
전체 모두 사용할 수 있는 변수와 특정위치에서만 사용할 수 있는 차이가 있음


객체 
속성 + 메소드 = 객체
(변수) + (함수)

정의할때는 : 사용
그냥 사용하면 정의한 값을 그대로 씀
변수로 사용하여 값을 변경할 때는 = 사용

함수로 객체생성할때는 생성자 이름을 첫글자를 대문자로 사용하여 생성한다. 
이하 함수내용에는 this.을 사용한다. 
함수로 생성할 경우 생성을 반드시 해야 함. 
var 변수 = new 객체명 (인수)


------------------------------------------------- 07월 25일 ------------------------------------------------

Date 객체
setTimeout (함수이름, 1000) <--1000은 ms로 1초를 의미한다.  


String 객체
length () 문자길이를 체크
toLowerCase () 문자를 소문자로 만듬
toUpperCase () 문자를 대문자로 만듬
concat () 문자열을 함침
indexOf() 문자의 위치값을 반환한다. 
match() 일치하는 값을 찾을 때 사용
replace() 일치하는 값을 바꿀 때 사용
split() 
html도 스크립트에서 사용이 가능


Math 객체
수학을 기반으로 한 코딩


Array 객체

isNaN(변수명) 숫자인지 확인하는 속성


------------------------------------------------- 07월 26일 ------------------------------------------------


DOM (Document Object Model) - HTML관련 문서를 제어하는 것들
 - Document_node HTML 문서 자체
 - Element_node 태그
 - Attribute_node 속성
 - Text_node 요소 안에 텍스트

BOM (Browser Object Model) - 브라우저를 제어하는 것들

getElementById().innerHTML; <-- 일반태그에 사용
                .value; <-- input 등 입력폼에 사용할 때 

getElementByTagName() 태그의 이름을 가지고 옴 [0]  <-- 이렇게해서 작성 순서에 따라서 호출가능 0번이 1번째 쓰여진 태그이며 생략하는 경우 전체를 호출하게 됨

childNodes
FirstChild
ChildNodes
LastChild
parentNode
nextSibling
previousSibling

HTML의 요소 변경하기
getElementById().innerHTML="" <-- 이런식으로 변경하려는 내용을 추가해 준다. 

HTML의 속성 변경하기
object.속성명=값

HTML의 스타일 변경하기
object.style.속성명=값

속성명을 작성할때는 -를 생략한다. 예를 들면 font-family ==> fontFamily 로 작성한다.

DOM 노드 삭제와 추가
1. 추가를 원하는 노드를 생성
2. 추가할 위치를 찾기
3. 기존 노드에 연결

appendChild 자식노드로 추가
firstChild 첫번째자식에 추가


BOM
window 최상위 속성으로 일반적으로 생략되는 경우가 많음
 - open() / close()
 - setTimeout() / setInterval() / clearInterval()
 - moveTo() / moveBy()
 - scrollTo() / scrollBy()

 - screen 객체
 - location 객체
 - navigator 객체

navigator
location
history
screen
document
frame[]


------------------------------------------------- 07월 27일 ------------------------------------------------



이벤트 처리
onclick <-- 마우스 클릭하여 누르면 발생하는 사항에 대하여 정의
onload / onunload  <-- 웹페이지를 열 때 / 닫을 때 사항에 대하여 정의
onchange <-- 지정한 위치에서 벗어날 경우 정의된 사항을 변경한다. 
onmouseover / onmousein / onmouseout <-- 마우스를 올릴 때/ 들어올때 / 떠날때 정의 사항을 적용한다.
onmousedown / onmouseup / onclick <-- 마우스를 누를 때, 올렸을 때 그리고 클릭이 완료된 후 발생하는 것이 정의됨


Form의 유효성 검증
필수 필드를 입력했는지 여부
유효길이 확인
유효한 형식 확인
숫자필드에 글자입력 여부 확인

유효성 검증 시기
onfocus / onblur <-- 커서가 확인되는 시점, 커서가 없어지는 시점
checkLength() <--길이를 확인하는 함수로 텍스트필드와 최소, 최대가 필요

정규식으로 /  / 사이에 위치함
^ 시작
$ 끝
. 한개의 문자와 일치
[] 문자의 종류와 범위
\d 한개의 숫자와 일치
\w 한개의 문자나 숫자와 일치
\s 공백, 탭, 줄바꿈, 캐리지 리턴문자와 일치

이메일 검증
@문자가 없는 경우
아이디에 허용하지 않는 문자가 포함된 경우 
도메인에 허용하지 않는 문자가 포함된 경우 

선택검증












